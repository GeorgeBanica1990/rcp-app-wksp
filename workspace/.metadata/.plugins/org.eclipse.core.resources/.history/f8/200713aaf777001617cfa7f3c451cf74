package com.georgeb.rcpapp.parts;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.eclipse.egit.github.core.RepositoryId;
import org.eclipse.egit.github.core.client.GitHubClient;
import org.eclipse.egit.github.core.service.RepositoryService;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.Status;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.internal.storage.file.FileRepository;
import org.eclipse.jgit.lib.Constants;
import org.eclipse.jgit.lib.Ref;
import org.eclipse.jgit.lib.Repository;
import org.eclipse.jgit.revwalk.RevCommit;
import org.eclipse.jgit.revwalk.RevWalk;

public class GitCommands {
	public static void fork(String[] args) throws IOException {
		GitHubClient client = new GitHubClient();
		client.setCredentials(args[0], args[1]);
		RepositoryService service = new RepositoryService(client);
		RepositoryId toBeForked = new RepositoryId(args[2], args[3]);
		service.forkRepository(toBeForked);
	}
	
	public static void getCommits(String repository) throws IOException, GitAPIException{
		Repository repo = new FileRepository(repository);
		Git git = new Git(repo);
        Iterable<RevCommit> revCommits = git.log()
                .add(repo.resolve("master"))
                .call();
        for(RevCommit revCommit : revCommits){
            System.out.println(revCommit.getName());
        }
        git.close();
	}

	  public static void testClone(String uri, String localRep) throws IOException, GitAPIException {
	        Git.cloneRepository().setURI(uri)
	                .setDirectory(new File(localRep)).call();
	    }
}
